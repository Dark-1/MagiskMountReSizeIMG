#!/sbin/sh
# 
##########################################################################################
# 
# Magisk
# by topjohnwu
# 
# This is Magisk Mount , UnMount & ReSize IMG ZIP for Users/Developers.
# 
# By Dark1
# Profile :
# https://forum.xda-developers.com/member.php?u=7292542
# https://github.com/dark-1
# 
# This script is Depending on Magisk Binary File , Will Not work without IT.
# 
# DO Not Touch this Script Unless Necessary.
# 
##########################################################################################

TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
# Always mount under tmp
MOUNTPATH=$TMPDIR/magisk_img

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "*******************************"
  ui_print " Please install Magisk v17.0+! "
  ui_print "*******************************"
  exit 1
}

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

mount /data 2>/dev/null

# Load utility functions
if [ -f /data/adb/magisk/util_functions.sh ]; then
  . /data/adb/magisk/util_functions.sh
elif [ -f /data/magisk/util_functions.sh ]; then
  NVBASE=/data
  . /data/magisk/util_functions.sh
else
  require_new_magisk
fi

# Use alternative image if in BOOTMODE
$BOOTMODE && IMG=$NVBASE/magisk_merge.img

# Preperation for flashable zips
setup_flashable

# Mount partitions
mount_partitions

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# De-Bug Variable , For De-Bug'ing , Will be Over-Writen from "config.sh" if Enabled
DeBugInfo=false

# Extract configurations file
unzip -o "$ZIP" config.sh -d $INSTALLER >&2

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

###########################################
## Function's                            ##
###########################################

# ReSize Mode
image_resize()
{
  $DeBugInfo && ui_print "- Start of Fn image_resize"
  local ReSizeIMG=$1
  local ReSizeMode=$2
  local ReSizeUserMB=$3
  
  $DeBugInfo && ui_print "- ReSizeMode before Convert is $ReSizeMode"
  ReSizeMode=${ReSizeMode%%.*} && ReSizeMode=${ReSizeMode##*-}
  $DeBugInfo && ui_print "- ReSizeMode after Convert is $ReSizeMode"
  
  case $ReSizeMode in
    0 )
        # Just InFo for Magisk IMG
        ui_print "- In \"$ReSizeMode\" ReSizeMode"
        check_filesystem $ReSizeIMG $MOUNTPATH
        ui_print "- ----"
        ui_print "- InFo for Magisk IMG \"$ReSizeIMG\""
        ui_print "- Free  Size = $curFreeM M"
        ui_print "- Used  Size = $curUsedM M"
        ui_print "- Total Size = $curSizeM M"
        ui_print "- NOTE : This are Current Values"
        ui_print "- ----"
      ;;
    1 )
        # ReSize to Default 64M OR MoRe Depending on Current Used Size
        ui_print "- In \"$ReSizeMode\" ReSizeMode"
        check_filesystem $ReSizeIMG $MOUNTPATH
        local MinSize=$((curUsedM / 32 * 32 + 64))
        ui_print "- ReSizeing \"$ReSizeIMG\" to ${MinSize} M "
        $MAGISKBIN/magisk imgtool resize $ReSizeIMG $MinSize >&2
        $DeBugInfo && ui_print "- Done ReSizeIMG'ing"
      ;;
    2 )
        # ReSize to User Spicified Size BUT NOT less than 64M OR Current Used Size
        ui_print "- In \"$ReSizeMode\" ReSizeMode"
        $DeBugInfo && ui_print "- ReSizeUserMB before Convert is $ReSizeUserMB"
        ReSizeUserMB=${ReSizeUserMB%%.*} && ReSizeUserMB=${ReSizeUserMB##*-} && ReSizeUserMB=$((ReSizeUserMB / 4 * 4))
        $DeBugInfo && ui_print "- ReSizeUserMB after Convert is $ReSizeUserMB"
        check_filesystem $ReSizeIMG $MOUNTPATH
        if [ $ReSizeUserMB -gt 64 ] && [ $ReSizeUserMB -gt $curUsedM ] ; 
        then
          ui_print "- ReSizeing \"$ReSizeIMG\" to ${ReSizeUserMB} M "
          $MAGISKBIN/magisk imgtool resize $ReSizeIMG $ReSizeUserMB >&2
        else
          ui_print "! Did Not ReSize !" 
          ui_print "! Due to \"$ReSizeUserMB\" is Either Less-Than \"64\" OR \"$curUsedM\" !" 
          ui_print "! Hence!... Abort"
          exit 1
        fi
        $DeBugInfo && ui_print "- Done ReSizeIMG'ing"
      ;;
    3 )
        # ReSize to Current Size + User Spicified Size BUT Total is NOT less than 64M OR Current Used Size
        ui_print "- In \"$ReSizeMode\" ReSizeMode"
        $DeBugInfo && ui_print "- ReSizeUserMB before Convert is $ReSizeUserMB"
        ReSizeUserMB=${ReSizeUserMB%%.*} && ReSizeUserMB=$((ReSizeUserMB / 4 * 4))
        $DeBugInfo && ui_print "- ReSizeUserMB after Convert is $ReSizeUserMB"
        check_filesystem $ReSizeIMG $MOUNTPATH
        local NEWsizeMB=$((curSizeM + ReSizeUserMB))
        if [ $NEWsizeMB -gt 64 ] && [ $NEWsizeMB -gt $curUsedM ] ; 
        then
          ui_print "- Since \"$curSizeM\" + \"$ReSizeUserMB\" = \"$NEWsizeMB\"" 
          ui_print "- ReSizeing \"$ReSizeIMG\" to ${NEWsizeMB} M "
          $MAGISKBIN/magisk imgtool resize $ReSizeIMG $NEWsizeMB >&2
        else
          ui_print "! Did Not ReSize !" 
          ui_print "! Since \"$curSizeM\" + \"$ReSizeUserMB\" = \"$NEWsizeMB\"!" 
          ui_print "! Due to \"$NEWsizeMB\" is Either Less-Than \"64\" OR \"$curUsedM\" !" 
          ui_print "! Hence!... Abort"
          exit 1
        fi
        $DeBugInfo && ui_print "- Done ReSizeIMG'ing"
      ;;
    * )
        # Default if NoNe of Above
        ui_print "- Wrong InPut > \"$ReSizeMode\""
        ui_print "- Hence ReSizeing \"$ReSizeIMG\" Skipped"
        $DeBugInfo && ui_print "- Done DeFault Display"
      ;;
  esac
  $DeBugInfo && ui_print "- End of Fn image_resize"
}

# DeBug Info
print_db_info()
{
  ui_print " "
  ui_print "*******************************"
  ui_print "!!!#      DeBug InFo      #!!! "
  ui_print "!> DeBugInfo == $DeBugInfo "
  ui_print "!> MTSW ======= $MTSW "
  ui_print "!> MTRSMO ===== $MTRSMO "
  ui_print "!> MTRSMB ===== $MTRSMB "
  ui_print "!> UTSW ======= $UTSW "
  ui_print "!> UTRSMO ===== $UTRSMO "
  ui_print "!> UTRSMB ===== $UTRSMB "
  ui_print "!> RSOSW ====== $RSOSW "
  ui_print "!> RSOMO ====== $RSOMO "
  ui_print "!> RSOMB ====== $RSOMB "
  is_mounted $MOUNTPATH && ui_print "!> Mounted \"$MOUNTPATH\""
  is_mounted $MOUNTPATH || ui_print "!> UnMounted \"$MOUNTPATH\""
  ui_print "*******************************"
}

###########################################
## Main                                  ##
###########################################

# Please leave this message in your flashable zip for credits :-)
ui_print " "
ui_print "********************************"
ui_print " Magisk Mount , UnMount         "
ui_print "        & ReSize IMG ZIP        "
ui_print " By Dark1                       "
ui_print "********************************"
ui_print " "
ui_print "********************************"
ui_print " Powered by Magisk (@topjohnwu) "
ui_print "********************************"
ui_print " "
print_msg
$DeBugInfo && print_db_info
ui_print " "


# Magic of the Script to Mount Or UnMount Or Skip both and just ReSize is Here
# Study Well :P  B)

# ReSize Only IMG Mode
if $RSOSW ; 
then
  ui_print "- Magisk ReSize Only IMG Mode [RSOSW]"
  if is_mounted $MOUNTPATH ; 
  then
    ui_print "! \"$IMG\" Mounted Hence UnMounting to ReSize"
    local DEVLOOP=`cat /proc/mounts | grep " $MOUNTPATH " | head -n 1 | cut -c -16`
    $DeBugInfo && ui_print "- Detaching \"$DEVLOOP\""
    $MAGISKBIN/magisk imgtool umount $MOUNTPATH $DEVLOOP
    # Check if Still Mount'ed
    is_mounted $MOUNTPATH && abort "! \"$IMG\" Unmount Failed!..."
    rmdir $MOUNTPATH
    $DeBugInfo && ui_print "- UnMounted $MOUNTPATH"
    $DeBugInfo && ui_print "- from $IMG & $DEVLOOP"
  fi
  image_resize $IMG $RSOMO $RSOMB
  $DeBugInfo && ui_print "- Done ReSize Only Mode"
  
# Mount IMG Mode
elif $MTSW && ! is_mounted $MOUNTPATH ; 
then
  ui_print "- Magisk Mount IMG Mode [MTSW]"
  image_resize $IMG $MTRSMO $MTRSMB
  ui_print "- Mounting $IMG to $MOUNTPATH"
  local MAGISKLOOP=`$MAGISKBIN/magisk imgtool mount $IMG $MOUNTPATH`
  # Check if Not Mount'ed
  is_mounted $MOUNTPATH || abort "! \"$IMG\" Mount on \"$MAGISKLOOP\" failed..."
  ui_print "- \"$IMG\" Mounted on DevLoop = $MAGISKLOOP"
  $DeBugInfo && ui_print "- Done Mount IMG Mode"
  
# UnMount IMG Mode
elif $UTSW && is_mounted $MOUNTPATH ; 
then
  ui_print "- Magisk UnMount IMG Mode [UTSW]"
  ui_print "- UnMounting $MOUNTPATH from $IMG"
  local DEVLOOP=`cat /proc/mounts | grep " $MOUNTPATH " | head -n 1 | cut -c -16`
  ui_print "- Detaching \"$DEVLOOP\""
  $MAGISKBIN/magisk imgtool umount $MOUNTPATH $DEVLOOP
  # Check if Still Mount'ed
  is_mounted $MOUNTPATH && abort "! \"$IMG\" Unmount Failed!..."
  rmdir $MOUNTPATH
  ui_print "- UnMounted $MOUNTPATH"
  ui_print "- from $IMG & $DEVLOOP"
  image_resize $IMG $UTRSMO $UTRSMB
  $DeBugInfo && ui_print "- Done UnMount IMG Mode"
  
# Do NoThing Mode :P
else
  ui_print "! NoThIng DoNe   |-_-|   !"
  is_mounted $MOUNTPATH && ui_print "! Already Mounted \"$MOUNTPATH\"" || ui_print "! Already UnMounted \"$MOUNTPATH\""
  $RSOSW && ui_print "! Not EXE ReSizeOnly[RSOSW]" || ui_print "! Not Config ReSizeOnly[RSOSW]"
  $MTSW && ui_print "! Not EXE Mount[MTSW]" || ui_print "! Not Config Mount[MTSW]"
  $UTSW && ui_print "! Not EXE UnMount[UTSW]" || ui_print "! Not Config UnMount[UTSW]"
  ui_print "- Hmm ... TiMe WaStEd  :< "
  ui_print "- Ether U 0r I m DrUnK :x "
fi

##########################################################################################
# Finalizing
##########################################################################################
$DeBugInfo && ui_print "- Finalizing ..."
$BOOTMODE || recovery_cleanup
$DeBugInfo && ui_print "- Before ReMove $TMPDIR"
rm -rf $TMPDIR

ui_print "- Done"
exit 0
