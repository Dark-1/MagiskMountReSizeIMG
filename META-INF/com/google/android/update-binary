#!/sbin/sh
# 
##########################################################################################
# 
# Magisk
# by topjohnwu
# 
# This is Magisk Mount , UnMount & ReSize IMG ZIP for Users/Developers.
# 
# By Dark1
# Profile :
# https://forum.xda-developers.com/member.php?u=7292542
# https://github.com/dark-1
# 
# This script is Depending on Magisk Binary File , Will Not work without IT.
# 
# DO Not Touch this Script Unless Necessary.
# 
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/magisk
IMG=/data/magisk.img
if $BOOTMODE; then
  MOUNTPATH=/dev/magisk_merge
  IMG=/data/magisk_merge.img
fi
MOUNTDIR=$TMPDIR/mountdir
MAGISKBIN=/data/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $MOUNTDIR

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0
  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

ui_print() {
  if $BOOTMODE; then
    echo "$1"
  else
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
  fi
}

require_new_magisk() {
  ui_print "***********************************"
  ui_print "! $MAGISKBIN isn't setup properly !"
  ui_print "!  Please install Magisk v14.0+   !"
  ui_print "***********************************"
  exit 1
}

ui_print "- Mounting /system, /vendor, /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

# MAGISKBIN must exist, binaries and utility functions are placed there
[ -d $MAGISKBIN -a -f $MAGISKBIN/magisk -a -f $MAGISKBIN/util_functions.sh ] || require_new_magisk

# Load utility fuctions
. $MAGISKBIN/util_functions.sh

# Check for Magisk
[ ! -f $IMG ] && abort "!!! Magisk is not Installed!"
$BOOTMODE && ! is_mounted /magisk && abort "!!! Magisk is not activated!"

# We need busybox/binaries to be setup
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# De-Bug Variable , For De-Bug'ing , Will be Over-Writen from "config.sh" if Enabled
DeBugInfo=false

# Extract configurations file
unzip -o "$ZIP" config.sh -d $MOUNTDIR 2>/dev/null
[ ! -f $MOUNTDIR/config.sh ] && abort "!!! Unable to extract zip file!"

# Load configurations
. $MOUNTDIR/config.sh

###########################################
## Function's                            ##
###########################################

# Magic of UnMounting is Here
# Study Well ;-) B-)
umount_image() 
{
  local PATHMOUNT=$1
  local CHKIMG=$2
  local DEVLOOP=`mount | grep " $PATHMOUNT " | head -n 1 | cut -c -16`
  local CHKLOOP=`losetup -a | grep "$CHKIMG" | head -n 1 | cut -c -16`
  if [ $DEVLOOP = $CHKLOOP ];
  then
    $MAGISKBIN/magisk --umountimg $PATHMOUNT $DEVLOOP
    rmdir $PATHMOUNT
    if ! is_mounted $PATHMOUNT;
    then
      ui_print "- UnMounting \"$PATHMOUNT\""
      ui_print "- Detaching \"$DEVLOOP\" from \"$CHKIMG\""
    else
      ui_print "! UnMounting \"$PATHMOUNT\" Failed"
    fi
  else
     ui_print "! Loop Device \"$DEVLOOP\" is Not Equal To \"$CHKLOOP\"!"
     ui_print "! Hence UnMounting \"$PATHMOUNT\" Failed"
  fi
}

# ReSize Mode
image_resize()
{
  local ReSizeIMG=$1
  local ReSizeMode=$2
  local ReSizeUserMB=$3
  
  $DeBugInfo && ui_print "- ReSizeMode before Convert is $ReSizeMode"
  ReSizeMode=${ReSizeMode%%.*} && ReSizeMode=${ReSizeMode##*-}
  $DeBugInfo && ui_print "- ReSizeMode after Convert is $ReSizeMode"
  
  case $ReSizeMode in
    0 )
        # Just InFo for Magisk IMG
        ui_print "- In \"$ReSizeMode\" ReSizeMode"
        image_size_check $ReSizeIMG
        ui_print "- InFo for Magisk IMG \"$ReSizeIMG\""
        ui_print "- Free  Size = $curFreeM M"
        ui_print "- Used  Size = $curUsedM M"
        ui_print "- Total Size = $curSizeM M"
        ui_print "- NOTE : This are Current Values"
      ;;
    1 )
        # ReSize to Default 64M OR MoRe Depending on Current Used Size
        ui_print "- In \"$ReSizeMode\" ReSizeMode"
        image_size_check $ReSizeIMG
        local MinSize=$((curUsedM / 32 * 32 + 64))
        ui_print "- ReSizeing \"$ReSizeIMG\" to ${MinSize} M "
        $MAGISKBIN/magisk --resizeimg $ReSizeIMG $MinSize
      ;;
    2 )
        # ReSize to User Spicified Size BUT NOT less than 64M OR Current Used Size
        ui_print "- In \"$ReSizeMode\" ReSizeMode"
        $DeBugInfo && ui_print "- ReSizeUserMB before Convert is $ReSizeUserMB"
        ReSizeUserMB=${ReSizeUserMB%%.*} && ReSizeUserMB=${ReSizeUserMB##*-} && ReSizeUserMB=$((ReSizeUserMB / 4 * 4))
        $DeBugInfo && ui_print "- ReSizeUserMB after Convert is $ReSizeUserMB"
        image_size_check $ReSizeIMG
        if [ $ReSizeUserMB -gt 64 ] && [ $ReSizeUserMB -gt $curUsedM ] ; 
        then
          ui_print "- ReSizeing \"$ReSizeIMG\" to ${ReSizeUserMB} M "
          $MAGISKBIN/magisk --resizeimg $ReSizeIMG $ReSizeUserMB
        else
          ui_print "! Did Not ReSize !" 
          ui_print "! Due to \"$ReSizeUserMB\" is Either Less-Than \"64\" OR \"$curUsedM\" !" 
          ui_print "! Hence!... Abort"
          exit 1
        fi
      ;;
    3 )
        # ReSize to Current Size + User Spicified Size BUT Total is NOT less than 64M OR Current Used Size
        ui_print "- In \"$ReSizeMode\" ReSizeMode"
        $DeBugInfo && ui_print "- ReSizeUserMB before Convert is $ReSizeUserMB"
        ReSizeUserMB=${ReSizeUserMB%%.*} && ReSizeUserMB=$((ReSizeUserMB / 4 * 4))
        $DeBugInfo && ui_print "- ReSizeUserMB after Convert is $ReSizeUserMB"
        image_size_check $ReSizeIMG
        local NEWsizeMB=$((curSizeM + ReSizeUserMB))
        if [ $NEWsizeMB -gt 64 ] && [ $NEWsizeMB -gt $curUsedM ] ; 
        then
          ui_print "- Since \"$curSizeM\" + \"$ReSizeUserMB\" = \"$NEWsizeMB\"" 
          ui_print "- ReSizeing \"$ReSizeIMG\" to ${NEWsizeMB} M "
          $MAGISKBIN/magisk --resizeimg $ReSizeIMG $NEWsizeMB
        else
          ui_print "! Did Not ReSize !" 
          ui_print "! Since \"$curSizeM\" + \"$ReSizeUserMB\" = \"$NEWsizeMB\"!" 
          ui_print "! Due to \"$NEWsizeMB\" is Either Less-Than \"64\" OR \"$curUsedM\" !" 
          ui_print "! Hence!... Abort"
          exit 1
        fi
      ;;
    * )
        # Default if NoNe of Above
        ui_print "- Wrong InPut > \"$ReSizeMode\""
        ui_print "- Hence ReSizeing \"$ReSizeIMG\" Skipped"
      ;;
  esac
}

# DeBug Info
print_db_info()
{
  ui_print " "
  ui_print "*******************************"
  ui_print "!!!#      DeBug InFo      #!!! "
  ui_print "0> DeBugInfo == $DeBugInfo "
  ui_print "1> MTSW ======= $MTSW "
  ui_print "2> MTRSMO ===== $MTRSMO "
  ui_print "3> MTRSMB ===== $MTRSMB "
  ui_print "4> UTSW ======= $UTSW "
  ui_print "5> UTRSMO ===== $UTRSMO "
  ui_print "6> UTRSMB ===== $UTRSMB "
  ui_print "*******************************"
}

###########################################
## Main                                  ##
###########################################

# Please leave this message in your flashable zip for credits :-)
ui_print " "
ui_print "********************************"
ui_print " Magisk Mount , UnMount         "
ui_print "        & ReSize IMG ZIP        "
ui_print " By Dark1                       "
ui_print "********************************"
ui_print " "
ui_print "********************************"
ui_print " Powered by Magisk (@topjohnwu) "
ui_print "********************************"
ui_print " "
print_msg
$DeBugInfo && print_db_info
ui_print " "

# Magic to Mount Or UnMount of the Script is Here
# Study Well :-P  B-)
if ! is_mounted $MOUNTPATH; 
then
  ui_print "- Magisk Mount IMG Mode"
  image_resize $IMG $MTRSMO $MTRSMB
  ui_print "- Mounting $IMG to $MOUNTPATH"
  local MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
  is_mounted $MOUNTPATH || abort "! \"$IMG\" mount failed..."
  ui_print "- \"$IMG\" Mounted on DevLoop = $MAGISKLOOP"
else
  ui_print "- Magisk UnMount IMG Mode"
  umount_image $MOUNTPATH $IMG
  # Check if Still Mount'ed
  if is_mounted $MOUNTPATH; 
  then
    ui_print "! \"$IMG\" Unmount Failed!... Abort"
    exit 1
  fi
  image_resize $IMG $UTRSMO $UTRSMB
fi



# Magic to Mount Or UnMount of the Script is Here
# Study Well :-P  B-)

# 
if [ $ROSW ];
then
  ui_print "- Magisk ReSize Only IMG Mode"
  if is_mounted $MOUNTPATH; 
  then
    ui_print "! \"$IMG\" Mounted Hence UnMounting to ReSize"
    umount_image $MOUNTPATH $IMG
    # Check if Still Mount'ed
    is_mounted $MOUNTPATH && abort "! \"$IMG\" Unmount Failed!..."
  fi
  image_resize $IMG $RSMO $RSMB
  
elif [ ! is_mounted $MOUNTPATH && $MTSW ] ; 
then
  ui_print "- Magisk Mount IMG Mode"
  image_resize $IMG $MTRSMO $MTRSMB
  ui_print "- Mounting $IMG to $MOUNTPATH"
  local MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
  is_mounted $MOUNTPATH || abort "! \"$IMG\" Mount failed..."
  ui_print "- \"$IMG\" Mounted on DevLoop = $MAGISKLOOP"
  
elif [ is_mounted $MOUNTPATH && $UTSW ] ; 
then
  ui_print "- Magisk UnMount IMG Mode"
  umount_image $MOUNTPATH $IMG
  # Check if Still Mount'ed
  is_mounted $MOUNTPATH && abort "! \"$IMG\" Unmount Failed!..."
  image_resize $IMG $UTRSMO $UTRSMB
  
else
  ui_print "! WhY DiD U FlAsH ThIs ZiP ??? :x "
fi




##########################################################################################
# Finalizing
##########################################################################################

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
exit 0
